
sixrgbled.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000022c  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000079  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000033d  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000f2  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d7  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c5  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	19 c0       	rjmp	.+50     	; 0x5a <__bad_interrupt>
  28:	18 c0       	rjmp	.+48     	; 0x5a <__bad_interrupt>
  2a:	17 c0       	rjmp	.+46     	; 0x5a <__bad_interrupt>
  2c:	16 c0       	rjmp	.+44     	; 0x5a <__bad_interrupt>
  2e:	15 c0       	rjmp	.+42     	; 0x5a <__bad_interrupt>
  30:	14 c0       	rjmp	.+40     	; 0x5a <__bad_interrupt>
  32:	13 c0       	rjmp	.+38     	; 0x5a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e2       	ldi	r30, 0x2C	; 44
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 31       	cpi	r26, 0x12	; 18
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>
  56:	5c d0       	rcall	.+184    	; 0x110 <main>
  58:	e7 c0       	rjmp	.+462    	; 0x228 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <init>:
//PB2 PB1 PB0 //RGB cathodes, on=1


void init(void)
{
	DDRB |= bv(0) | bv(1) | bv(2);
  5c:	84 b1       	in	r24, 0x04	; 4
  5e:	87 60       	ori	r24, 0x07	; 7
  60:	84 b9       	out	0x04, r24	; 4
	DDRC |= bv(0) | bv(1) | bv(2);
  62:	87 b1       	in	r24, 0x07	; 7
  64:	87 60       	ori	r24, 0x07	; 7
  66:	87 b9       	out	0x07, r24	; 7
	DDRD |= bv(5) | bv(6) | bv(7);
  68:	8a b1       	in	r24, 0x0a	; 10
  6a:	80 6e       	ori	r24, 0xE0	; 224
  6c:	8a b9       	out	0x0a, r24	; 10

	DDRB |= 0xff;
  6e:	84 b1       	in	r24, 0x04	; 4
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0xff;
  74:	97 b1       	in	r25, 0x07	; 7
  76:	87 b9       	out	0x07, r24	; 7
	DDRD |= 0xff;
  78:	9a b1       	in	r25, 0x0a	; 10
  7a:	8a b9       	out	0x0a, r24	; 10

}
  7c:	08 95       	ret

0000007e <allon>:

void allon(void)
{
	PORTB |= bv(0) | bv(1) | bv(2);
  7e:	85 b1       	in	r24, 0x05	; 5
  80:	87 60       	ori	r24, 0x07	; 7
  82:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(bv(0) | bv(1) | bv(2));
  84:	88 b1       	in	r24, 0x08	; 8
  86:	88 7f       	andi	r24, 0xF8	; 248
  88:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~(bv(5) | bv(6) | bv(7));
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	8f 71       	andi	r24, 0x1F	; 31
  8e:	8b b9       	out	0x0b, r24	; 11
}
  90:	08 95       	ret

00000092 <alloff>:


void alloff(void)
{
	PORTB &= ~(bv(0) | bv(1) | bv(2));
  92:	85 b1       	in	r24, 0x05	; 5
  94:	88 7f       	andi	r24, 0xF8	; 248
  96:	85 b9       	out	0x05, r24	; 5
	PORTC |= bv(0) | bv(1) | bv(2);
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	87 60       	ori	r24, 0x07	; 7
  9c:	88 b9       	out	0x08, r24	; 8
	PORTD |= bv(5) | bv(6) | bv(7);
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	80 6e       	ori	r24, 0xE0	; 224
  a2:	8b b9       	out	0x0b, r24	; 11
}
  a4:	08 95       	ret

000000a6 <biton>:

void biton(unsigned char bits)
{
	unsigned char pc = bits & 0x07;
	unsigned char pd = (bits & 0x38) << 2;
	PORTC &= ~pc;
  a6:	28 b1       	in	r18, 0x08	; 8
	PORTD |= bv(5) | bv(6) | bv(7);
}

void biton(unsigned char bits)
{
	unsigned char pc = bits & 0x07;
  a8:	98 2f       	mov	r25, r24
  aa:	97 70       	andi	r25, 0x07	; 7
	unsigned char pd = (bits & 0x38) << 2;
	PORTC &= ~pc;
  ac:	90 95       	com	r25
  ae:	92 23       	and	r25, r18
  b0:	98 b9       	out	0x08, r25	; 8
	PORTD &= ~pd;
  b2:	9b b1       	in	r25, 0x0b	; 11
}

void biton(unsigned char bits)
{
	unsigned char pc = bits & 0x07;
	unsigned char pd = (bits & 0x38) << 2;
  b4:	88 73       	andi	r24, 0x38	; 56
  b6:	88 0f       	add	r24, r24
  b8:	88 0f       	add	r24, r24
	PORTC &= ~pc;
	PORTD &= ~pd;
  ba:	80 95       	com	r24
  bc:	89 23       	and	r24, r25
  be:	8b b9       	out	0x0b, r24	; 11
}
  c0:	08 95       	ret

000000c2 <bitoff>:

void bitoff(unsigned char bits)
{
	unsigned char pc = bits & 0x07;
	unsigned char pd = (bits & 0x38) << 2;
	PORTC |= pc;
  c2:	28 b1       	in	r18, 0x08	; 8
	PORTD &= ~pd;
}

void bitoff(unsigned char bits)
{
	unsigned char pc = bits & 0x07;
  c4:	98 2f       	mov	r25, r24
  c6:	97 70       	andi	r25, 0x07	; 7
	unsigned char pd = (bits & 0x38) << 2;
	PORTC |= pc;
  c8:	92 2b       	or	r25, r18
  ca:	98 b9       	out	0x08, r25	; 8
	PORTD |= pd;
  cc:	9b b1       	in	r25, 0x0b	; 11
}

void bitoff(unsigned char bits)
{
	unsigned char pc = bits & 0x07;
	unsigned char pd = (bits & 0x38) << 2;
  ce:	88 73       	andi	r24, 0x38	; 56
  d0:	88 0f       	add	r24, r24
  d2:	88 0f       	add	r24, r24
	PORTC |= pc;
	PORTD |= pd;
  d4:	89 2b       	or	r24, r25
  d6:	8b b9       	out	0x0b, r24	; 11
}
  d8:	08 95       	ret

000000da <bitset>:

void bitset(unsigned char bits)
{
  da:	1f 93       	push	r17
  dc:	18 2f       	mov	r17, r24
	bitoff(~bits);
  de:	80 95       	com	r24
  e0:	f0 df       	rcall	.-32     	; 0xc2 <bitoff>
	biton(bits);
  e2:	81 2f       	mov	r24, r17
  e4:	e0 df       	rcall	.-64     	; 0xa6 <biton>

}
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <colon>:


void colon(unsigned char bits) // 1-green, 2-blue, 4-red
{
	unsigned char pb = bits & 0x07;
	PORTB |= pb;
  ea:	95 b1       	in	r25, 0x05	; 5
}


void colon(unsigned char bits) // 1-green, 2-blue, 4-red
{
	unsigned char pb = bits & 0x07;
  ec:	87 70       	andi	r24, 0x07	; 7
	PORTB |= pb;
  ee:	89 2b       	or	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5
}
  f2:	08 95       	ret

000000f4 <coloff>:

void coloff(unsigned char bits)
{
	unsigned char pb = bits & 0x07;
	PORTB &= ~pb;
  f4:	95 b1       	in	r25, 0x05	; 5
	PORTB |= pb;
}

void coloff(unsigned char bits)
{
	unsigned char pb = bits & 0x07;
  f6:	87 70       	andi	r24, 0x07	; 7
	PORTB &= ~pb;
  f8:	80 95       	com	r24
  fa:	89 23       	and	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
}
  fe:	08 95       	ret

00000100 <colset>:

void colset(unsigned char bits)
{
 100:	1f 93       	push	r17
 102:	18 2f       	mov	r17, r24
	coloff(~bits);
 104:	80 95       	com	r24
 106:	f6 df       	rcall	.-20     	; 0xf4 <coloff>
	colon(bits);
 108:	81 2f       	mov	r24, r17
 10a:	ef df       	rcall	.-34     	; 0xea <colon>
}
 10c:	1f 91       	pop	r17
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
 110:	af 92       	push	r10
 112:	bf 92       	push	r11
 114:	cf 92       	push	r12
 116:	df 92       	push	r13
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	63 97       	sbiw	r28, 0x13	; 19
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61

//	char r[6] = {0x00, 0x10, 0x20, 0x40, 0x80, 0xf0};
//	char g[6] = {0x00, 0x10, 0x20, 0x40, 0x80, 0xf0};
//	char b[6] = {0x00, 0x10, 0x20, 0x40, 0x80, 0xf0};

	char r[6] = {0xff, 0xff, 0xA0, 0x00, 0x00, 0x00};
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	ec e0       	ldi	r30, 0x0C	; 12
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	01 90       	ld	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	81 50       	subi	r24, 0x01	; 1
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x2e>
	char g[6] = {0x00, 0x10, 0xA0, 0xff, 0xA0, 0x00};
 146:	de 01       	movw	r26, r28
 148:	17 96       	adiw	r26, 0x07	; 7
 14a:	e6 e0       	ldi	r30, 0x06	; 6
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	81 50       	subi	r24, 0x01	; 1
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x40>
	char b[6] = {0x00, 0x00, 0x00, 0x00, 0xA0, 0xff};
 158:	de 01       	movw	r26, r28
 15a:	1d 96       	adiw	r26, 0x0d	; 13
 15c:	e0 e0       	ldi	r30, 0x00	; 0
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	01 90       	ld	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	81 50       	subi	r24, 0x01	; 1
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x52>

	init();
 16a:	78 df       	rcall	.-272    	; 0x5c <init>
	alloff();
 16c:	92 df       	rcall	.-220    	; 0x92 <alloff>

	while (1)
	{

		colset(1);
		for (unsigned char i = 0; i<255; i++) {
 16e:	97 e0       	ldi	r25, 0x07	; 7
 170:	e9 2e       	mov	r14, r25
 172:	f1 2c       	mov	r15, r1
 174:	ec 0e       	add	r14, r28
 176:	fd 1e       	adc	r15, r29
{
	coloff(~bits);
	colon(bits);
}

int main(void)
 178:	8e 01       	movw	r16, r28
 17a:	03 5f       	subi	r16, 0xF3	; 243
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
 17e:	83 e1       	ldi	r24, 0x13	; 19
 180:	c8 2e       	mov	r12, r24
 182:	d1 2c       	mov	r13, r1
 184:	cc 0e       	add	r12, r28
 186:	dd 1e       	adc	r13, r29
			bitset(bits);
		}
		alloff();

		colset(4);
		for (unsigned char i = 0; i<255; i++) {
 188:	5e 01       	movw	r10, r28
 18a:	08 94       	sec
 18c:	a1 1c       	adc	r10, r1
 18e:	b1 1c       	adc	r11, r1
	char ib = 0;

	while (1)
	{

		colset(1);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	b6 df       	rcall	.-148    	; 0x100 <colset>
		for (unsigned char i = 0; i<255; i++) {
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	11 c0       	rjmp	.+34     	; 0x1ba <main+0xaa>
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
				bits = bits << 1;
				bits |= (g[j]>i);
 198:	31 91       	ld	r19, Z+

		colset(1);
		for (unsigned char i = 0; i<255; i++) {
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
				bits = bits << 1;
 19a:	22 0f       	add	r18, r18
				bits |= (g[j]>i);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	93 17       	cp	r25, r19
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <main+0x94>
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	82 2b       	or	r24, r18
 1a6:	28 2f       	mov	r18, r24
	{

		colset(1);
		for (unsigned char i = 0; i<255; i++) {
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
 1a8:	e0 17       	cp	r30, r16
 1aa:	f1 07       	cpc	r31, r17
 1ac:	a9 f7       	brne	.-22     	; 0x198 <main+0x88>
				bits = bits << 1;
				bits |= (g[j]>i);
				g[j]+=ig;
			}
			bitset(bits);
 1ae:	9b 8b       	std	Y+19, r25	; 0x13
 1b0:	94 df       	rcall	.-216    	; 0xda <bitset>

	while (1)
	{

		colset(1);
		for (unsigned char i = 0; i<255; i++) {
 1b2:	9b 89       	ldd	r25, Y+19	; 0x13
 1b4:	9f 5f       	subi	r25, 0xFF	; 255
 1b6:	9f 3f       	cpi	r25, 0xFF	; 255
 1b8:	19 f0       	breq	.+6      	; 0x1c0 <main+0xb0>
 1ba:	f7 01       	movw	r30, r14
{
	coloff(~bits);
	colon(bits);
}

int main(void)
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	ec cf       	rjmp	.-40     	; 0x198 <main+0x88>
				bits |= (g[j]>i);
				g[j]+=ig;
			}
			bitset(bits);
		}
		alloff();
 1c0:	68 df       	rcall	.-304    	; 0x92 <alloff>

		colset(2);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	9d df       	rcall	.-198    	; 0x100 <colset>
		for (unsigned char i = 0; i<255; i++) {
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <main+0xdc>
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
				bits = bits << 1;
				bits |= (b[j]>i);
 1ca:	31 91       	ld	r19, Z+

		colset(2);
		for (unsigned char i = 0; i<255; i++) {
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
				bits = bits << 1;
 1cc:	22 0f       	add	r18, r18
				bits |= (b[j]>i);
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	93 17       	cp	r25, r19
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <main+0xc6>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	82 2b       	or	r24, r18
 1d8:	28 2f       	mov	r18, r24
		alloff();

		colset(2);
		for (unsigned char i = 0; i<255; i++) {
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
 1da:	ec 15       	cp	r30, r12
 1dc:	fd 05       	cpc	r31, r13
 1de:	a9 f7       	brne	.-22     	; 0x1ca <main+0xba>
				bits = bits << 1;
				bits |= (b[j]>i);
				b[j]+=ib;
			}
			bitset(bits);
 1e0:	9b 8b       	std	Y+19, r25	; 0x13
 1e2:	7b df       	rcall	.-266    	; 0xda <bitset>
			bitset(bits);
		}
		alloff();

		colset(2);
		for (unsigned char i = 0; i<255; i++) {
 1e4:	9b 89       	ldd	r25, Y+19	; 0x13
 1e6:	9f 5f       	subi	r25, 0xFF	; 255
 1e8:	9f 3f       	cpi	r25, 0xFF	; 255
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <main+0xe2>
 1ec:	f8 01       	movw	r30, r16
{
	coloff(~bits);
	colon(bits);
}

int main(void)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	ec cf       	rjmp	.-40     	; 0x1ca <main+0xba>
				bits |= (b[j]>i);
				b[j]+=ib;
			}
			bitset(bits);
		}
		alloff();
 1f2:	4f df       	rcall	.-354    	; 0x92 <alloff>

		colset(4);
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	84 df       	rcall	.-248    	; 0x100 <colset>
		for (unsigned char i = 0; i<255; i++) {
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	11 c0       	rjmp	.+34     	; 0x21e <main+0x10e>
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
				bits = bits << 1;
				bits |= (r[j]>i);
 1fc:	31 91       	ld	r19, Z+

		colset(4);
		for (unsigned char i = 0; i<255; i++) {
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
				bits = bits << 1;
 1fe:	22 0f       	add	r18, r18
				bits |= (r[j]>i);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	93 17       	cp	r25, r19
 204:	08 f0       	brcs	.+2      	; 0x208 <main+0xf8>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	82 2b       	or	r24, r18
 20a:	28 2f       	mov	r18, r24
		alloff();

		colset(4);
		for (unsigned char i = 0; i<255; i++) {
			unsigned char bits = 0;
			for (unsigned char j = 0; j<6; j++) {
 20c:	ee 15       	cp	r30, r14
 20e:	ff 05       	cpc	r31, r15
 210:	a9 f7       	brne	.-22     	; 0x1fc <main+0xec>
				bits = bits << 1;
				bits |= (r[j]>i);
				r[j]+=ir;
			}
			bitset(bits);
 212:	9b 8b       	std	Y+19, r25	; 0x13
 214:	62 df       	rcall	.-316    	; 0xda <bitset>
			bitset(bits);
		}
		alloff();

		colset(4);
		for (unsigned char i = 0; i<255; i++) {
 216:	9b 89       	ldd	r25, Y+19	; 0x13
 218:	9f 5f       	subi	r25, 0xFF	; 255
 21a:	9f 3f       	cpi	r25, 0xFF	; 255
 21c:	19 f0       	breq	.+6      	; 0x224 <main+0x114>
 21e:	f5 01       	movw	r30, r10
{
	coloff(~bits);
	colon(bits);
}

int main(void)
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	ec cf       	rjmp	.-40     	; 0x1fc <main+0xec>
				bits |= (r[j]>i);
				r[j]+=ir;
			}
			bitset(bits);
		}
		alloff();
 224:	36 df       	rcall	.-404    	; 0x92 <alloff>
	}
 226:	b4 cf       	rjmp	.-152    	; 0x190 <main+0x80>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
