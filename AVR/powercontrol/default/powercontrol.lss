
powercontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004ec  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080010c  0080010c  0000058c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000135  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003e6  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000128  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004c1  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000175  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  00001a69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	45 c0       	rjmp	.+138    	; 0xb0 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	76 c0       	rjmp	.+236    	; 0x116 <__vector_20>
  2a:	be c1       	rjmp	.+892    	; 0x3a8 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec ee       	ldi	r30, 0xEC	; 236
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ac 30       	cpi	r26, 0x0C	; 12
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	ac e0       	ldi	r26, 0x0C	; 12
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 36       	cpi	r26, 0x60	; 96
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	fe d1       	rcall	.+1020   	; 0x464 <main>
  68:	3f c2       	rjmp	.+1150   	; 0x4e8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <initUSART>:
uint8_t usart_tx_wp;
uint8_t usart_tx_rp;
char usart_tx_buf[USART_TX_BUF];

void initUSART(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	UBRR0L = LO(BAUDDIVIDER);
  74:	84 ec       	ldi	r24, 0xC4	; 196
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	2f e0       	ldi	r18, 0x0F	; 15
  7a:	fc 01       	movw	r30, r24
  7c:	20 83       	st	Z, r18
	UBRR0H = HI(BAUDDIVIDER);
  7e:	85 ec       	ldi	r24, 0xC5	; 197
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	fc 01       	movw	r30, r24
  84:	10 82       	st	Z, r1
	UCSR0B = 1<<RXEN0|1<<TXEN0|1<<RXCIE0|1<<TXCIE0;
  86:	81 ec       	ldi	r24, 0xC1	; 193
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	28 ed       	ldi	r18, 0xD8	; 216
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
	UCSR0C = 1<<UCSZ00|1<<UCSZ01;
  90:	82 ec       	ldi	r24, 0xC2	; 194
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	26 e0       	ldi	r18, 0x06	; 6
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18

	usart_rx_wp = 0;
  9a:	10 92 4f 01 	sts	0x014F, r1
	usart_rx_rp = 0;
  9e:	10 92 2c 01 	sts	0x012C, r1

	usart_tx_wp = 0;
  a2:	10 92 2d 01 	sts	0x012D, r1
	usart_tx_rp = 0;
  a6:	10 92 4e 01 	sts	0x014E, r1
}
  aa:	cf 91       	pop	r28
  ac:	df 91       	pop	r29
  ae:	08 95       	ret

000000b0 <__vector_18>:

ISR(USART_RX_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	2f 93       	push	r18
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	0f 92       	push	r0
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	char c = UDR0;
  ce:	86 ec       	ldi	r24, 0xC6	; 198
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	89 83       	std	Y+1, r24	; 0x01
	if (usart_rx_wp<USART_RX_BUF) {
  d8:	80 91 4f 01 	lds	r24, 0x014F
  dc:	80 32       	cpi	r24, 0x20	; 32
  de:	70 f4       	brcc	.+28     	; 0xfc <__vector_18+0x4c>
		usart_rx_buf[usart_rx_wp] = c;
  e0:	80 91 4f 01 	lds	r24, 0x014F
  e4:	88 2f       	mov	r24, r24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 5d       	subi	r24, 0xD2	; 210
  ea:	9e 4f       	sbci	r25, 0xFE	; 254
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
		usart_rx_wp++;
  f2:	80 91 4f 01 	lds	r24, 0x014F
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 4f 01 	sts	0x014F, r24
	} //if buffer overflow, we lose byte from UART
}
  fc:	0f 90       	pop	r0
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_20>:

ISR(USART_TX_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	if (usart_tx_rp<usart_tx_wp) {
 134:	90 91 4e 01 	lds	r25, 0x014E
 138:	80 91 2d 01 	lds	r24, 0x012D
 13c:	98 17       	cp	r25, r24
 13e:	d8 f4       	brcc	.+54     	; 0x176 <__vector_20+0x60>
		UDR0 = usart_tx_buf[usart_tx_rp];
 140:	86 ec       	ldi	r24, 0xC6	; 198
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	20 91 4e 01 	lds	r18, 0x014E
 148:	22 2f       	mov	r18, r18
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	24 5f       	subi	r18, 0xF4	; 244
 14e:	3e 4f       	sbci	r19, 0xFE	; 254
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
		usart_tx_rp++;
 158:	80 91 4e 01 	lds	r24, 0x014E
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 4e 01 	sts	0x014E, r24
		if (usart_tx_rp>=usart_tx_wp) {
 162:	90 91 4e 01 	lds	r25, 0x014E
 166:	80 91 2d 01 	lds	r24, 0x012D
 16a:	98 17       	cp	r25, r24
 16c:	20 f0       	brcs	.+8      	; 0x176 <__vector_20+0x60>
			usart_tx_rp = 0;
 16e:	10 92 4e 01 	sts	0x014E, r1
			usart_tx_wp = 0;
 172:	10 92 2d 01 	sts	0x012D, r1
		}
	}	
}
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <putchr>:

void putchr(char ch)
{
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	0f 92       	push	r0
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	89 83       	std	Y+1, r24	; 0x01
	sei();
 19c:	78 94       	sei
	while (usart_tx_wp>=USART_TX_BUF) {}
 19e:	00 00       	nop
 1a0:	80 91 2d 01 	lds	r24, 0x012D
 1a4:	80 32       	cpi	r24, 0x20	; 32
 1a6:	e0 f7       	brcc	.-8      	; 0x1a0 <putchr+0x10>
	cli();
 1a8:	f8 94       	cli
	usart_tx_buf[usart_tx_wp] = ch;
 1aa:	80 91 2d 01 	lds	r24, 0x012D
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	84 5f       	subi	r24, 0xF4	; 244
 1b4:	9e 4f       	sbci	r25, 0xFE	; 254
 1b6:	29 81       	ldd	r18, Y+1	; 0x01
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
	usart_tx_wp++;
 1bc:	80 91 2d 01 	lds	r24, 0x012D
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 2d 01 	sts	0x012D, r24
	sei();
 1c6:	78 94       	sei

	if (UCSR0A & (1<<UDRE0)) {
 1c8:	80 ec       	ldi	r24, 0xC0	; 192
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 72       	andi	r24, 0x20	; 32
 1d6:	90 70       	andi	r25, 0x00	; 0
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	d9 f0       	breq	.+54     	; 0x212 <putchr+0x82>
		UDR0 = usart_tx_buf[usart_tx_rp];
 1dc:	86 ec       	ldi	r24, 0xC6	; 198
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	20 91 4e 01 	lds	r18, 0x014E
 1e4:	22 2f       	mov	r18, r18
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	24 5f       	subi	r18, 0xF4	; 244
 1ea:	3e 4f       	sbci	r19, 0xFE	; 254
 1ec:	f9 01       	movw	r30, r18
 1ee:	20 81       	ld	r18, Z
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
		usart_tx_rp++;
 1f4:	80 91 4e 01 	lds	r24, 0x014E
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 4e 01 	sts	0x014E, r24
		if (usart_tx_rp>=usart_tx_wp) {
 1fe:	90 91 4e 01 	lds	r25, 0x014E
 202:	80 91 2d 01 	lds	r24, 0x012D
 206:	98 17       	cp	r25, r24
 208:	20 f0       	brcs	.+8      	; 0x212 <putchr+0x82>
			usart_tx_rp = 0;
 20a:	10 92 4e 01 	sts	0x014E, r1
			usart_tx_wp = 0;
 20e:	10 92 2d 01 	sts	0x012D, r1
		}
	}
}
 212:	0f 90       	pop	r0
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	08 95       	ret

0000021a <chrready>:

char chrready(void)
{
 21a:	df 93       	push	r29
 21c:	cf 93       	push	r28
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	return (usart_rx_wp>usart_rx_rp);
 222:	20 91 4f 01 	lds	r18, 0x014F
 226:	90 91 2c 01 	lds	r25, 0x012C
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	92 17       	cp	r25, r18
 22e:	08 f0       	brcs	.+2      	; 0x232 <chrready+0x18>
 230:	80 e0       	ldi	r24, 0x00	; 0
}
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <getchr>:

char getchr(void)
{
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	sei();
 242:	78 94       	sei
	while (!chrready());
 244:	00 00       	nop
 246:	e9 df       	rcall	.-46     	; 0x21a <chrready>
 248:	88 23       	and	r24, r24
 24a:	e9 f3       	breq	.-6      	; 0x246 <getchr+0xe>
	cli();
 24c:	f8 94       	cli
	char c = usart_rx_buf[usart_rx_rp];
 24e:	80 91 2c 01 	lds	r24, 0x012C
 252:	88 2f       	mov	r24, r24
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	82 5d       	subi	r24, 0xD2	; 210
 258:	9e 4f       	sbci	r25, 0xFE	; 254
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	89 83       	std	Y+1, r24	; 0x01
	usart_rx_rp++;
 260:	80 91 2c 01 	lds	r24, 0x012C
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 2c 01 	sts	0x012C, r24
	if (usart_rx_rp >= usart_rx_wp) {
 26a:	90 91 2c 01 	lds	r25, 0x012C
 26e:	80 91 4f 01 	lds	r24, 0x014F
 272:	98 17       	cp	r25, r24
 274:	20 f0       	brcs	.+8      	; 0x27e <getchr+0x46>
		usart_rx_rp = 0;
 276:	10 92 2c 01 	sts	0x012C, r1
		usart_rx_wp = 0;
 27a:	10 92 4f 01 	sts	0x014F, r1
	}
	sei();
 27e:	78 94       	sei
	return c;
 280:	89 81       	ldd	r24, Y+1	; 0x01
}
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <printstr>:

void printstr(char *string)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <printstr+0x6>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	89 83       	std	Y+1, r24	; 0x01
	while (*string!='\0')
 298:	0a c0       	rjmp	.+20     	; 0x2ae <printstr+0x24>
	{
		putchr(*string);
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	fc 01       	movw	r30, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	76 df       	rcall	.-276    	; 0x190 <putchr>
		string++;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	9a 81       	ldd	r25, Y+2	; 0x02
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	89 83       	std	Y+1, r24	; 0x01
	return c;
}

void printstr(char *string)
{
	while (*string!='\0')
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	88 23       	and	r24, r24
 2b8:	81 f7       	brne	.-32     	; 0x29a <printstr+0x10>
	{
		putchr(*string);
		string++;
	}
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <chartohex>:

char chartohex(char c) //only for 0x00 - 0x0F
{
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <chartohex+0x6>
 2ca:	0f 92       	push	r0
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	8b 83       	std	Y+3, r24	; 0x03
	char ch = c & 0x0F;
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	89 83       	std	Y+1, r24	; 0x01
	char hx = ((ch<10)?(ch+'0'):(ch+'A'-10));
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	8a 30       	cpi	r24, 0x0A	; 10
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <chartohex+0x20>
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	80 5d       	subi	r24, 0xD0	; 208
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <chartohex+0x24>
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	89 5c       	subi	r24, 0xC9	; 201
 2e8:	8a 83       	std	Y+2, r24	; 0x02
	return hx;
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	08 95       	ret

000002f8 <hextochar>:

char hextochar(char c)
{
 2f8:	df 93       	push	r29
 2fa:	cf 93       	push	r28
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <hextochar+0x6>
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	8a 83       	std	Y+2, r24	; 0x02
	char ch = (c<='9')?(c-'0'):((c<='F')?(c-'A'+10):((c<='f')?(c-'a'+10):0));
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	8a 33       	cpi	r24, 0x3A	; 58
 308:	18 f4       	brcc	.+6      	; 0x310 <__stack+0x11>
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	80 53       	subi	r24, 0x30	; 48
 30e:	0d c0       	rjmp	.+26     	; 0x32a <__stack+0x2b>
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	87 34       	cpi	r24, 0x47	; 71
 314:	18 f4       	brcc	.+6      	; 0x31c <__stack+0x1d>
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	87 53       	subi	r24, 0x37	; 55
 31a:	07 c0       	rjmp	.+14     	; 0x32a <__stack+0x2b>
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	87 36       	cpi	r24, 0x67	; 103
 320:	18 f4       	brcc	.+6      	; 0x328 <__stack+0x29>
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	87 55       	subi	r24, 0x57	; 87
 326:	01 c0       	rjmp	.+2      	; 0x32a <__stack+0x2b>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	89 83       	std	Y+1, r24	; 0x01
	return ch;
 32c:	89 81       	ldd	r24, Y+1	; 0x01
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	cf 91       	pop	r28
 334:	df 91       	pop	r29
 336:	08 95       	ret

00000338 <printhex>:

void printhex(char c)
{
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	00 d0       	rcall	.+0      	; 0x33e <printhex+0x6>
 33e:	0f 92       	push	r0
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	8b 83       	std	Y+3, r24	; 0x03
	char lo = c & 0x0F;
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	8f 70       	andi	r24, 0x0F	; 15
 34a:	89 83       	std	Y+1, r24	; 0x01
	char hi = (c & 0xF0) >> 4;
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	82 95       	swap	r24
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	8a 83       	std	Y+2, r24	; 0x02
	putchr(lo + ((lo<10)?'0':'A'-10));
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	8a 30       	cpi	r24, 0x0A	; 10
 358:	10 f4       	brcc	.+4      	; 0x35e <printhex+0x26>
 35a:	80 e3       	ldi	r24, 0x30	; 48
 35c:	01 c0       	rjmp	.+2      	; 0x360 <printhex+0x28>
 35e:	87 e3       	ldi	r24, 0x37	; 55
 360:	99 81       	ldd	r25, Y+1	; 0x01
 362:	89 0f       	add	r24, r25
 364:	15 df       	rcall	.-470    	; 0x190 <putchr>
	putchr(hi + ((hi<10)?'0':'A'-10));
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	8a 30       	cpi	r24, 0x0A	; 10
 36a:	10 f4       	brcc	.+4      	; 0x370 <printhex+0x38>
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	01 c0       	rjmp	.+2      	; 0x372 <printhex+0x3a>
 370:	87 e3       	ldi	r24, 0x37	; 55
 372:	9a 81       	ldd	r25, Y+2	; 0x02
 374:	89 0f       	add	r24, r25
 376:	0c df       	rcall	.-488    	; 0x190 <putchr>
}
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	08 95       	ret

00000384 <initADC>:
#define ADC_BUF_SIZE 8

int adc_buf[ADC_BUF_SIZE];

void initADC()
{
 384:	df 93       	push	r29
 386:	cf 93       	push	r28
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 1<<REFS0|1<<ADLAR|0<<MUX0;
 38c:	8c e7       	ldi	r24, 0x7C	; 124
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	20 e6       	ldi	r18, 0x60	; 96
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18
	sei();
 396:	78 94       	sei
	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADSC)|(0<<ADATE)|(3<<ADPS0);
 398:	8a e7       	ldi	r24, 0x7A	; 122
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	2b ec       	ldi	r18, 0xCB	; 203
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
}
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <__vector_21>:

ISR(ADC_vect)
{
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
 3be:	df 93       	push	r29
 3c0:	cf 93       	push	r28
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <__vector_21+0x1c>
 3c4:	00 d0       	rcall	.+0      	; 0x3c6 <__vector_21+0x1e>
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
	int chnl = ADMUX & 0x07;
 3ca:	8c e7       	ldi	r24, 0x7C	; 124
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	88 2f       	mov	r24, r24
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	87 70       	andi	r24, 0x07	; 7
 3d8:	90 70       	andi	r25, 0x00	; 0
 3da:	9a 83       	std	Y+2, r25	; 0x02
 3dc:	89 83       	std	Y+1, r24	; 0x01
	int val = ADC;
 3de:	88 e7       	ldi	r24, 0x78	; 120
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	91 81       	ldd	r25, Z+1	; 0x01
 3e8:	9c 83       	std	Y+4, r25	; 0x04
 3ea:	8b 83       	std	Y+3, r24	; 0x03
	adc_buf[chnl] = val;
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	80 5b       	subi	r24, 0xB0	; 176
 3f6:	9e 4f       	sbci	r25, 0xFE	; 254
 3f8:	2b 81       	ldd	r18, Y+3	; 0x03
 3fa:	3c 81       	ldd	r19, Y+4	; 0x04
 3fc:	fc 01       	movw	r30, r24
 3fe:	31 83       	std	Z+1, r19	; 0x01
 400:	20 83       	st	Z, r18
	chnl = (chnl + 1) & 0x07;
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	9a 81       	ldd	r25, Y+2	; 0x02
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	87 70       	andi	r24, 0x07	; 7
 40a:	90 70       	andi	r25, 0x00	; 0
 40c:	9a 83       	std	Y+2, r25	; 0x02
 40e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & (~0x07)) | chnl;
 410:	8c e7       	ldi	r24, 0x7C	; 124
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	2c e7       	ldi	r18, 0x7C	; 124
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	32 2f       	mov	r19, r18
 41e:	38 7f       	andi	r19, 0xF8	; 248
 420:	29 81       	ldd	r18, Y+1	; 0x01
 422:	23 2b       	or	r18, r19
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADSC)|(0<<ADATE)|(3<<ADPS0);
 428:	8a e7       	ldi	r24, 0x7A	; 122
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	2b ec       	ldi	r18, 0xCB	; 203
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
}
 432:	24 96       	adiw	r28, 0x04	; 4
 434:	de bf       	out	0x3e, r29	; 62
 436:	cd bf       	out	0x3d, r28	; 61
 438:	cf 91       	pop	r28
 43a:	df 91       	pop	r29
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <init>:

void init()
{
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
	initUSART();
 45a:	08 de       	rcall	.-1008   	; 0x6c <initUSART>
	initADC();
 45c:	93 df       	rcall	.-218    	; 0x384 <initADC>
}
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	08 95       	ret

00000464 <main>:

int main(void)
{
 464:	df 93       	push	r29
 466:	cf 93       	push	r28
 468:	cd b7       	in	r28, 0x3d	; 61
 46a:	de b7       	in	r29, 0x3e	; 62
 46c:	27 97       	sbiw	r28, 0x07	; 7
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
	init();
 478:	ec df       	rcall	.-40     	; 0x452 <init>
	printstr("Test\n\r\0");
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	05 df       	rcall	.-502    	; 0x28a <printstr>
	printstr(">\0");
 480:	88 e0       	ldi	r24, 0x08	; 8
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	02 df       	rcall	.-508    	; 0x28a <printstr>
	int i = 0;
 486:	1a 82       	std	Y+2, r1	; 0x02
 488:	19 82       	std	Y+1, r1	; 0x01
 48a:	03 c0       	rjmp	.+6      	; 0x492 <main+0x2e>
					printhex(al);
					break;
				}
			}
		}
	}
 48c:	00 00       	nop
 48e:	01 c0       	rjmp	.+2      	; 0x492 <main+0x2e>
 490:	00 00       	nop
	init();
	printstr("Test\n\r\0");
	printstr(">\0");
	int i = 0;
	while (1) {
		i++;
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	9a 81       	ldd	r25, Y+2	; 0x02
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	9a 83       	std	Y+2, r25	; 0x02
 49a:	89 83       	std	Y+1, r24	; 0x01
		if (chrready()) {
 49c:	be de       	rcall	.-644    	; 0x21a <chrready>
 49e:	88 23       	and	r24, r24
 4a0:	a9 f3       	breq	.-22     	; 0x48c <main+0x28>
			char ch = getchr();
 4a2:	ca de       	rcall	.-620    	; 0x238 <getchr>
 4a4:	8b 83       	std	Y+3, r24	; 0x03
			switch (ch) {
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	c0 97       	sbiw	r24, 0x30	; 48
 4ae:	88 30       	cpi	r24, 0x08	; 8
 4b0:	91 05       	cpc	r25, r1
 4b2:	70 f7       	brcc	.-36     	; 0x490 <main+0x2c>
				case '4':
				case '5':
				case '6':
				case '7':
				{
					int a = adc_buf[ch-'0'];
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	88 2f       	mov	r24, r24
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	c0 97       	sbiw	r24, 0x30	; 48
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	80 5b       	subi	r24, 0xB0	; 176
 4c2:	9e 4f       	sbci	r25, 0xFE	; 254
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
 4ca:	9d 83       	std	Y+5, r25	; 0x05
 4cc:	8c 83       	std	Y+4, r24	; 0x04
					char ah = (a >> 8) & 0xFF;
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	89 2f       	mov	r24, r25
 4d4:	99 27       	eor	r25, r25
 4d6:	8e 83       	std	Y+6, r24	; 0x06
					char al = a & 0xFF;
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	8f 83       	std	Y+7, r24	; 0x07
					printhex(ah);
 4dc:	8e 81       	ldd	r24, Y+6	; 0x06
 4de:	2c df       	rcall	.-424    	; 0x338 <printhex>
					printhex(al);
 4e0:	8f 81       	ldd	r24, Y+7	; 0x07
 4e2:	2a df       	rcall	.-428    	; 0x338 <printhex>
					break;
 4e4:	00 00       	nop
				}
			}
		}
	}
 4e6:	d5 cf       	rjmp	.-86     	; 0x492 <main+0x2e>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
