
simple_servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000422  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009cd  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c61  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  88:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
uint16_t pause = 0;

void adc_start();

ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <__vector_21+0x2a>
  ba:	00 d0       	rcall	.+0      	; 0xbc <__vector_21+0x2c>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	int chnl = ADMUX & 0x07;
  c0:	8c e7       	ldi	r24, 0x7C	; 124
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	87 70       	andi	r24, 0x07	; 7
  ce:	99 27       	eor	r25, r25
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
	int val = ADC;
  d4:	88 e7       	ldi	r24, 0x78	; 120
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	91 81       	ldd	r25, Z+1	; 0x01
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	8b 83       	std	Y+3, r24	; 0x03
	adc[chnl] = val;
  e2:	2b 81       	ldd	r18, Y+3	; 0x03
  e4:	3c 81       	ldd	r19, Y+4	; 0x04
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	86 5f       	subi	r24, 0xF6	; 246
  f0:	9e 4f       	sbci	r25, 0xFE	; 254
  f2:	fc 01       	movw	r30, r24
  f4:	31 83       	std	Z+1, r19	; 0x01
  f6:	20 83       	st	Z, r18
	chnl = (chnl + 1) & 0x01;
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	99 27       	eor	r25, r25
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX & (~0x07)) | chnl;
 106:	8c e7       	ldi	r24, 0x7C	; 124
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	2c e7       	ldi	r18, 0x7C	; 124
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	32 2f       	mov	r19, r18
 114:	38 7f       	andi	r19, 0xF8	; 248
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	23 2b       	or	r18, r19
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18

	adc_start();
 11e:	0e 94 8b 01 	call	0x316	; 0x316 <adc_start>
}
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	00 92 5f 00 	sts	0x005F, r0
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	00 90 5f 00 	lds	r0, 0x005F
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <__vector_11+0x1e>
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	increment = (adc[0] >> 6) - 512;
 174:	80 91 0a 01 	lds	r24, 0x010A
 178:	90 91 0b 01 	lds	r25, 0x010B
 17c:	00 24       	eor	r0, r0
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	00 1c       	adc	r0, r0
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	00 1c       	adc	r0, r0
 18a:	89 2f       	mov	r24, r25
 18c:	90 2d       	mov	r25, r0
 18e:	92 50       	subi	r25, 0x02	; 2
 190:	90 93 07 01 	sts	0x0107, r25
 194:	80 93 06 01 	sts	0x0106, r24
	counter += increment;
 198:	20 91 04 01 	lds	r18, 0x0104
 19c:	30 91 05 01 	lds	r19, 0x0105
 1a0:	80 91 06 01 	lds	r24, 0x0106
 1a4:	90 91 07 01 	lds	r25, 0x0107
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	90 93 05 01 	sts	0x0105, r25
 1b0:	80 93 04 01 	sts	0x0104, r24
	phase = (counter >> 14) & 0b11;
 1b4:	80 91 04 01 	lds	r24, 0x0104
 1b8:	90 91 05 01 	lds	r25, 0x0105
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	98 9f       	mul	r25, r24
 1c0:	81 2d       	mov	r24, r1
 1c2:	99 27       	eor	r25, r25
 1c4:	11 24       	eor	r1, r1
 1c6:	80 93 00 01 	sts	0x0100, r24

	uint8_t msk = (((0b11001<<phase)>>3)<<MOTOR_PIN0);
 1ca:	80 91 00 01 	lds	r24, 0x0100
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	89 e1       	ldi	r24, 0x19	; 25
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <__vector_11+0x8c>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <__vector_11+0x88>
 1e2:	95 95       	asr	r25
 1e4:	87 95       	ror	r24
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	88 0f       	add	r24, r24
 1f0:	88 0f       	add	r24, r24
 1f2:	89 83       	std	Y+1, r24	; 0x01
	if (msk == lastmsk) {
 1f4:	80 91 01 01 	lds	r24, 0x0101
 1f8:	99 81       	ldd	r25, Y+1	; 0x01
 1fa:	98 17       	cp	r25, r24
 1fc:	a1 f4       	brne	.+40     	; 0x226 <__vector_11+0xd4>
		if (hldtime > 4000) {
 1fe:	80 91 02 01 	lds	r24, 0x0102
 202:	90 91 03 01 	lds	r25, 0x0103
 206:	81 3a       	cpi	r24, 0xA1	; 161
 208:	2f e0       	ldi	r18, 0x0F	; 15
 20a:	92 07       	cpc	r25, r18
 20c:	10 f0       	brcs	.+4      	; 0x212 <__vector_11+0xc0>
			msk = 0;
 20e:	19 82       	std	Y+1, r1	; 0x01
 210:	1b c0       	rjmp	.+54     	; 0x248 <__vector_11+0xf6>
		} else {
			hldtime++;
 212:	80 91 02 01 	lds	r24, 0x0102
 216:	90 91 03 01 	lds	r25, 0x0103
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 03 01 	sts	0x0103, r25
 220:	80 93 02 01 	sts	0x0102, r24
 224:	11 c0       	rjmp	.+34     	; 0x248 <__vector_11+0xf6>
		}
	} else {
		hldtime = 0;
 226:	10 92 03 01 	sts	0x0103, r1
 22a:	10 92 02 01 	sts	0x0102, r1
		lastmsk = msk;
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	80 93 01 01 	sts	0x0101, r24
		PORTB ^= (1<<PORTB5); //blink led
 234:	85 e2       	ldi	r24, 0x25	; 37
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	25 e2       	ldi	r18, 0x25	; 37
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	30 81       	ld	r19, Z
 240:	20 e2       	ldi	r18, 0x20	; 32
 242:	23 27       	eor	r18, r19
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
	}

	uint8_t port = MOTOR_PORT;
 248:	8b e2       	ldi	r24, 0x2B	; 43
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	8a 83       	std	Y+2, r24	; 0x02
	port &= ~MOTOR_MASK;
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	83 7c       	andi	r24, 0xC3	; 195
 256:	8a 83       	std	Y+2, r24	; 0x02
	port |= msk;
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	89 2b       	or	r24, r25
 25e:	8a 83       	std	Y+2, r24	; 0x02
	MOTOR_PORT = port;
 260:	8b e2       	ldi	r24, 0x2B	; 43
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2a 81       	ldd	r18, Y+2	; 0x02
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
//	phase = phase + 1;
//	if (phase >= MOTOR_PHASES)
//		phase = 0;
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	00 92 5f 00 	sts	0x005F, r0
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <init_motor>:

void init_motor()
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT = (MOTOR_PORT & (~MOTOR_MASK));
 292:	8b e2       	ldi	r24, 0x2B	; 43
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2b e2       	ldi	r18, 0x2B	; 43
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	20 81       	ld	r18, Z
 29e:	23 7c       	andi	r18, 0xC3	; 195
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
	MOTOR_DDR = (MOTOR_DDR | MOTOR_MASK);
 2a4:	8a e2       	ldi	r24, 0x2A	; 42
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	2a e2       	ldi	r18, 0x2A	; 42
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	2c 63       	ori	r18, 0x3C	; 60
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <init_timer>:

void init_timer()
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0; //No compare
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	10 82       	st	Z, r1
	TCCR1B = (1<<WGM12)|(0b100<<CS10); //CTC, clk/256
 2cc:	81 e8       	ldi	r24, 0x81	; 129
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2c e0       	ldi	r18, 0x0C	; 12
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	OCR1A = 2 ; //16000000 / 256 / 2 = 12500
 2d6:	88 e8       	ldi	r24, 0x88	; 136
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	22 e0       	ldi	r18, 0x02	; 2
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	31 83       	std	Z+1, r19	; 0x01
 2e2:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);
 2e4:	8f e6       	ldi	r24, 0x6F	; 111
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	22 e0       	ldi	r18, 0x02	; 2
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <init_adc>:

void init_adc()
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
    ADMUX = (1<<REFS0)|(1<<ADLAR)|(0<<MUX0); //Vref = Vcc, left adjust result
 2fc:	8c e7       	ldi	r24, 0x7C	; 124
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	20 e6       	ldi	r18, 0x60	; 96
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
    ADCSRA = (1<<ADEN)|(1<<ADIE)|(3<<ADPS0)|(0<<ADATE);
 306:	8a e7       	ldi	r24, 0x7A	; 122
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	2b e8       	ldi	r18, 0x8B	; 139
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <adc_start>:

void adc_start()
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);
 31e:	8a e7       	ldi	r24, 0x7A	; 122
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	2a e7       	ldi	r18, 0x7A	; 122
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	20 64       	ori	r18, 0x40	; 64
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <init>:

void init()
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
    counter = 0;
 33e:	10 92 05 01 	sts	0x0105, r1
 342:	10 92 04 01 	sts	0x0104, r1
    increment = -1;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	90 93 07 01 	sts	0x0107, r25
 34e:	80 93 06 01 	sts	0x0106, r24
	init_motor();
 352:	0e 94 45 01 	call	0x28a	; 0x28a <init_motor>
	init_adc();
 356:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <init_adc>
	init_timer();
 35a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <init_timer>
	sei();
 35e:	78 94       	sei
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <main>:

int main(void)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
	init();
 36e:	0e 94 9b 01 	call	0x336	; 0x336 <init>
	adc_start();
 372:	0e 94 8b 01 	call	0x316	; 0x316 <adc_start>
	DDRB |= (1<<PORTB5); //LED
 376:	84 e2       	ldi	r24, 0x24	; 36
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	24 e2       	ldi	r18, 0x24	; 36
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	20 62       	ori	r18, 0x20	; 32
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
//	PORTB ^= (1<<PORTB5); //blink led

	while (1) {
	}
 388:	ff cf       	rjmp	.-2      	; 0x388 <main+0x22>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
