
sonar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000432  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  00800062  00800062  000004c8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000019a  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000480  00000000  00000000  00000dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000149  00000000  00000000  00001253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000586  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001b5  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000150  00000000  00000000  00001bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000001e  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3a       	cpi	r26, 0xAF	; 175
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 01 	call	0x330	; 0x330 <main>
  8a:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initUSART>:
uint8_t usart_tx_rp;
char usart_tx_buf[USART_TX_BUF];

void initUSART(void)
{
        UBRRL = LO(BAUDDIVIDER);
  92:	8e e2       	ldi	r24, 0x2E	; 46
  94:	89 b9       	out	0x09, r24	; 9
        UBRRH = HI(BAUDDIVIDER);
  96:	10 bc       	out	0x20, r1	; 32
        UCSRA = 0;
  98:	1b b8       	out	0x0b, r1	; 11
        UCSRB = 1<<RXEN|1<<TXEN|1<<RXCIE|1<<TXCIE;
  9a:	88 ed       	ldi	r24, 0xD8	; 216
  9c:	8a b9       	out	0x0a, r24	; 10
        UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32

		usart_rx_wp = 0;
  a2:	10 92 ac 00 	sts	0x00AC, r1
		usart_rx_rp = 0;
  a6:	10 92 89 00 	sts	0x0089, r1

		usart_tx_wp = 0;
  aa:	10 92 8a 00 	sts	0x008A, r1
		usart_tx_rp = 0;
  ae:	10 92 ab 00 	sts	0x00AB, r1
}
  b2:	08 95       	ret

000000b4 <__vector_11>:

ISR(USART_RXC_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	char c = UDR;
  c6:	9c b1       	in	r25, 0x0c	; 12
	if (usart_rx_wp<USART_RX_BUF) {
  c8:	80 91 ac 00 	lds	r24, 0x00AC
  cc:	80 32       	cpi	r24, 0x20	; 32
  ce:	40 f4       	brcc	.+16     	; 0xe0 <__vector_11+0x2c>
		usart_rx_buf[usart_rx_wp] = c;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e5 57       	subi	r30, 0x75	; 117
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	90 83       	st	Z, r25
		usart_rx_wp++;
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 ac 00 	sts	0x00AC, r24
	} //else we lose byte from UART
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_13>:

ISR(USART_TXC_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	ef 93       	push	r30
 104:	ff 93       	push	r31
	if (usart_tx_rp<usart_tx_wp) {
 106:	80 91 ab 00 	lds	r24, 0x00AB
 10a:	90 91 8a 00 	lds	r25, 0x008A
 10e:	89 17       	cp	r24, r25
 110:	78 f4       	brcc	.+30     	; 0x130 <__vector_13+0x3e>
		UDR = usart_tx_buf[usart_tx_rp];
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e7 59       	subi	r30, 0x97	; 151
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	20 81       	ld	r18, Z
 11c:	2c b9       	out	0x0c, r18	; 12
		usart_tx_rp++;
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 ab 00 	sts	0x00AB, r24
		if (usart_tx_rp>=usart_tx_wp) {
 124:	89 17       	cp	r24, r25
 126:	20 f0       	brcs	.+8      	; 0x130 <__vector_13+0x3e>
			usart_tx_rp = 0;
 128:	10 92 ab 00 	sts	0x00AB, r1
			usart_tx_wp = 0;
 12c:	10 92 8a 00 	sts	0x008A, r1
		}
	}	
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <putchr>:

void putchr(char ch)
{
	cli();
 144:	f8 94       	cli
	if (usart_tx_wp<USART_TX_BUF) {
 146:	90 91 8a 00 	lds	r25, 0x008A
 14a:	90 32       	cpi	r25, 0x20	; 32
 14c:	40 f4       	brcc	.+16     	; 0x15e <putchr+0x1a>
		usart_tx_buf[usart_tx_wp] = ch;
 14e:	e9 2f       	mov	r30, r25
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e7 59       	subi	r30, 0x97	; 151
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 83       	st	Z, r24
		usart_tx_wp++;
 158:	9f 5f       	subi	r25, 0xFF	; 255
 15a:	90 93 8a 00 	sts	0x008A, r25
	} //else buffer overflow error
	sei();
 15e:	78 94       	sei

	if (UCSRA & (1<<UDRE)) {
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	13 c0       	rjmp	.+38     	; 0x18a <putchr+0x46>
		UDR = usart_tx_buf[usart_tx_rp];
 164:	80 91 ab 00 	lds	r24, 0x00AB
 168:	e8 2f       	mov	r30, r24
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e7 59       	subi	r30, 0x97	; 151
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	90 81       	ld	r25, Z
 172:	9c b9       	out	0x0c, r25	; 12
		usart_tx_rp++;
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 ab 00 	sts	0x00AB, r24
		if (usart_tx_rp>=usart_tx_wp) {
 17a:	90 91 8a 00 	lds	r25, 0x008A
 17e:	89 17       	cp	r24, r25
 180:	20 f0       	brcs	.+8      	; 0x18a <putchr+0x46>
			usart_tx_rp = 0;
 182:	10 92 ab 00 	sts	0x00AB, r1
			usart_tx_wp = 0;
 186:	10 92 8a 00 	sts	0x008A, r1
 18a:	08 95       	ret

0000018c <chrready>:
	}
}

char chrready(void)
{
	return (usart_rx_wp>usart_rx_rp);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	20 91 ac 00 	lds	r18, 0x00AC
 192:	90 91 89 00 	lds	r25, 0x0089
 196:	92 17       	cp	r25, r18
 198:	08 f0       	brcs	.+2      	; 0x19c <chrready+0x10>
 19a:	80 e0       	ldi	r24, 0x00	; 0
}
 19c:	08 95       	ret

0000019e <getchr>:

char getchr(void)
{
	sei();
 19e:	78 94       	sei
	while (!chrready());
 1a0:	0e 94 c6 00 	call	0x18c	; 0x18c <chrready>
 1a4:	88 23       	and	r24, r24
 1a6:	a9 f0       	breq	.+42     	; 0x1d2 <getchr+0x34>
	cli();
 1a8:	f8 94       	cli
	char c = usart_rx_buf[usart_rx_rp];
 1aa:	90 91 89 00 	lds	r25, 0x0089
 1ae:	e9 2f       	mov	r30, r25
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	e5 57       	subi	r30, 0x75	; 117
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	80 81       	ld	r24, Z
	usart_rx_rp++;
 1b8:	9f 5f       	subi	r25, 0xFF	; 255
 1ba:	90 93 89 00 	sts	0x0089, r25
	if (usart_rx_rp >= usart_rx_wp) {
 1be:	20 91 ac 00 	lds	r18, 0x00AC
 1c2:	92 17       	cp	r25, r18
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <getchr+0x30>
		usart_rx_rp = 0;
 1c6:	10 92 89 00 	sts	0x0089, r1
		usart_rx_wp = 0;
 1ca:	10 92 ac 00 	sts	0x00AC, r1
	}
	sei();
 1ce:	78 94       	sei
	return c;
}
 1d0:	08 95       	ret
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <getchr+0x34>

000001d4 <printstr>:

void printstr(char *string)
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	e8 2e       	mov	r14, r24
 1de:	e7 01       	movw	r28, r14
 1e0:	7e 01       	movw	r14, r28
 1e2:	f9 2e       	mov	r15, r25
 1e4:	e7 01       	movw	r28, r14
	while (*string!='\0')
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <printstr+0x18>
	{
		putchr(*string);
 1e8:	0e 94 a2 00 	call	0x144	; 0x144 <putchr>
	return c;
}

void printstr(char *string)
{
	while (*string!='\0')
 1ec:	89 91       	ld	r24, Y+
 1ee:	88 23       	and	r24, r24
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <printstr+0x14>
	{
		putchr(*string);
		string++;
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	08 95       	ret

000001fc <chartohex>:

char chartohex(char c) //only for 0x00 - 0x0F
{
	char ch = c & 0x0F;
 1fc:	8f 70       	andi	r24, 0x0F	; 15
	char hx = ((ch<10)?(ch+'0'):(ch+'A'-10));
 1fe:	8a 30       	cpi	r24, 0x0A	; 10
 200:	10 f4       	brcc	.+4      	; 0x206 <chartohex+0xa>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	08 95       	ret
 206:	89 5c       	subi	r24, 0xC9	; 201
	return hx;
}
 208:	08 95       	ret

0000020a <hextochar>:

char hextochar(char c)
{
	char ch = (c<='9')?(c-'0'):((c<='F')?(c-'A'+10):((c<='f')?(c-'a'+10):0));
 20a:	8a 33       	cpi	r24, 0x3A	; 58
 20c:	10 f4       	brcc	.+4      	; 0x212 <hextochar+0x8>
 20e:	80 53       	subi	r24, 0x30	; 48
 210:	08 95       	ret
 212:	87 34       	cpi	r24, 0x47	; 71
 214:	10 f4       	brcc	.+4      	; 0x21a <hextochar+0x10>
 216:	87 53       	subi	r24, 0x37	; 55
 218:	08 95       	ret
 21a:	87 36       	cpi	r24, 0x67	; 103
 21c:	10 f4       	brcc	.+4      	; 0x222 <hextochar+0x18>
 21e:	87 55       	subi	r24, 0x57	; 87
 220:	08 95       	ret
 222:	80 e0       	ldi	r24, 0x00	; 0
	return ch;
}
 224:	08 95       	ret

00000226 <printhex>:

void printhex(char c)
{
 226:	1f 93       	push	r17
	char lo = c & 0x0F;
 228:	98 2f       	mov	r25, r24
 22a:	9f 70       	andi	r25, 0x0F	; 15
	char hi = (c & 0xF0) >> 4;
 22c:	18 2f       	mov	r17, r24
 22e:	12 95       	swap	r17
 230:	1f 70       	andi	r17, 0x0F	; 15
	putchr(lo + ((lo<10)?'0':'A'-10));
 232:	9a 30       	cpi	r25, 0x0A	; 10
 234:	10 f4       	brcc	.+4      	; 0x23a <printhex+0x14>
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	01 c0       	rjmp	.+2      	; 0x23c <printhex+0x16>
 23a:	87 e3       	ldi	r24, 0x37	; 55
 23c:	89 0f       	add	r24, r25
 23e:	0e 94 a2 00 	call	0x144	; 0x144 <putchr>
	putchr(hi + ((hi<10)?'0':'A'-10));
 242:	1a 30       	cpi	r17, 0x0A	; 10
 244:	10 f4       	brcc	.+4      	; 0x24a <printhex+0x24>
 246:	80 e3       	ldi	r24, 0x30	; 48
 248:	01 c0       	rjmp	.+2      	; 0x24c <printhex+0x26>
 24a:	87 e3       	ldi	r24, 0x37	; 55
 24c:	81 0f       	add	r24, r17
 24e:	0e 94 a2 00 	call	0x144	; 0x144 <putchr>
}
 252:	1f 91       	pop	r17
 254:	08 95       	ret

00000256 <timer2SetPrescaler>:
#define TIMER2_PRESCALER_VALUE (1<<(3*(TIMER2_PRESCALER-1)))
#define OCR2_VALUE (((F_CPU / TIMER2_PRESCALER_VALUE) / F_TARGET) / 2 - 1)

void timer2SetPrescaler(unsigned char prescale)
{
	outb(TCCR2, (inb(TCCR2) & ~TIMER_PRESCALE_MASK) | prescale);
 256:	95 b5       	in	r25, 0x25	; 37
 258:	98 7f       	andi	r25, 0xF8	; 248
 25a:	98 2b       	or	r25, r24
 25c:	95 bd       	out	0x25, r25	; 37
}
 25e:	08 95       	ret

00000260 <initOC2>:
 
void initOC2(void)
{
	sbi(TIMSK, OCIE2); //Interrupt on compare
 260:	89 b7       	in	r24, 0x39	; 57
 262:	80 68       	ori	r24, 0x80	; 128
 264:	89 bf       	out	0x39, r24	; 57
	//sbi(TIMSK, TOIE0); //Interrupt on overflow

    timer2SetPrescaler(TIMER2_PRESCALER); //start timer2 PWM
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 2b 01 	call	0x256	; 0x256 <timer2SetPrescaler>
 
//    cbi(TCCR0, WGM00);
//    cbi(TCCR0, WGM01); //Normal waveform generation mode
    cbi(TCCR2, WGM20);
 26c:	85 b5       	in	r24, 0x25	; 37
 26e:	8f 7b       	andi	r24, 0xBF	; 191
 270:	85 bd       	out	0x25, r24	; 37
    sbi(TCCR2, WGM21); //CTC (clear on compare) mode
 272:	85 b5       	in	r24, 0x25	; 37
 274:	88 60       	ori	r24, 0x08	; 8
 276:	85 bd       	out	0x25, r24	; 37

    cbi(TCCR2, COM20);
 278:	85 b5       	in	r24, 0x25	; 37
 27a:	8f 7e       	andi	r24, 0xEF	; 239
 27c:	85 bd       	out	0x25, r24	; 37
    cbi(TCCR2, COM21); //Normal port operation, OC0 disconnected
 27e:	85 b5       	in	r24, 0x25	; 37
 280:	8f 7d       	andi	r24, 0xDF	; 223
 282:	85 bd       	out	0x25, r24	; 37


	sei();               // Enable interrupts
 284:	78 94       	sei
 
    OCR2 = OCR2_VALUE;
 286:	87 eb       	ldi	r24, 0xB7	; 183
 288:	83 bd       	out	0x23, r24	; 35
}
 28a:	08 95       	ret

0000028c <initIO>:
 
unsigned int timest = 0; //time when signal appear
unsigned int timeen = 0; //time when signal disappear
void initIO(void)
{
    US_ODDR |= bv(US_ON) | bv(US_OP);
 28c:	81 b3       	in	r24, 0x11	; 17
 28e:	80 66       	ori	r24, 0x60	; 96
 290:	81 bb       	out	0x11, r24	; 17
	US_IDDR &= ~(bv(US_I));
 292:	d0 98       	cbi	0x1a, 0	; 26
}
 294:	08 95       	ret

00000296 <setumode>:
 


void setumode(int m)
{
	if (umode != m) {
 296:	20 91 60 00 	lds	r18, 0x0060
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	28 17       	cp	r18, r24
 29e:	39 07       	cpc	r19, r25
 2a0:	c9 f1       	breq	.+114    	; 0x314 <setumode+0x7e>
		cli();
 2a2:	f8 94       	cli
		switch (m) {
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	91 05       	cpc	r25, r1
 2a8:	a9 f0       	breq	.+42     	; 0x2d4 <setumode+0x3e>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	91 05       	cpc	r25, r1
 2ae:	1c f4       	brge	.+6      	; 0x2b6 <setumode+0x20>
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	41 f0       	breq	.+16     	; 0x2c4 <setumode+0x2e>
 2b4:	2c c0       	rjmp	.+88     	; 0x30e <setumode+0x78>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	91 05       	cpc	r25, r1
 2ba:	79 f0       	breq	.+30     	; 0x2da <setumode+0x44>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	91 05       	cpc	r25, r1
 2c0:	31 f5       	brne	.+76     	; 0x30e <setumode+0x78>
 2c2:	12 c0       	rjmp	.+36     	; 0x2e8 <setumode+0x52>
			case 0: {
				US_ODDR &= ~(bv(US_OP) | bv(US_ON));
 2c4:	21 b3       	in	r18, 0x11	; 17
 2c6:	2f 79       	andi	r18, 0x9F	; 159
 2c8:	21 bb       	out	0x11, r18	; 17
				time0 = 0;
 2ca:	10 92 ae 00 	sts	0x00AE, r1
 2ce:	10 92 ad 00 	sts	0x00AD, r1
				break;
 2d2:	1d c0       	rjmp	.+58     	; 0x30e <setumode+0x78>
			}
			case 1: { //emit
				US_OPORT |= bv(US_OP);
 2d4:	96 9a       	sbi	0x12, 6	; 18
				US_OPORT &= ~(bv(US_ON));
 2d6:	95 98       	cbi	0x12, 5	; 18
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <setumode+0x4a>
			    US_ODDR |= bv(US_ON) | bv(US_OP);
				break;
			}
			case 2: {
				US_OPORT &= ~(bv(US_ON) | bv(US_OP)); //Discharge piezo to ground
 2da:	22 b3       	in	r18, 0x12	; 18
 2dc:	2f 79       	andi	r18, 0x9F	; 159
 2de:	22 bb       	out	0x12, r18	; 18
			    US_ODDR |= bv(US_ON) | bv(US_OP);
 2e0:	21 b3       	in	r18, 0x11	; 17
 2e2:	20 66       	ori	r18, 0x60	; 96
 2e4:	21 bb       	out	0x11, r18	; 17
				break;
 2e6:	13 c0       	rjmp	.+38     	; 0x30e <setumode+0x78>
			}
			case 3: { //listen
				US_ODDR &= ~(bv(US_OP) | bv(US_ON));
 2e8:	21 b3       	in	r18, 0x11	; 17
 2ea:	2f 79       	andi	r18, 0x9F	; 159
 2ec:	21 bb       	out	0x11, r18	; 17
				uinlast = (US_IPIN & (bv(US_I))) != 0;
 2ee:	29 b3       	in	r18, 0x19	; 25
 2f0:	21 70       	andi	r18, 0x01	; 1
 2f2:	20 93 62 00 	sts	0x0062, r18
				impcount = 0;
 2f6:	10 92 64 00 	sts	0x0064, r1
 2fa:	10 92 63 00 	sts	0x0063, r1
				timest = 0;
 2fe:	10 92 66 00 	sts	0x0066, r1
 302:	10 92 65 00 	sts	0x0065, r1
				timeen = 0;
 306:	10 92 68 00 	sts	0x0068, r1
 30a:	10 92 67 00 	sts	0x0067, r1
				break;
			}
		}
		umode = m;
 30e:	80 93 60 00 	sts	0x0060, r24
		sei();
 312:	78 94       	sei
 314:	08 95       	ret

00000316 <init>:
}


void init(void)
{
        initUSART();
 316:	0e 94 49 00 	call	0x92	; 0x92 <initUSART>
        initIO();
 31a:	0e 94 46 01 	call	0x28c	; 0x28c <initIO>
        initOC2();
 31e:	0e 94 30 01 	call	0x260	; 0x260 <initOC2>
		US_OPORT |= bv(US_OP);
 322:	96 9a       	sbi	0x12, 6	; 18
		US_OPORT &= ~(bv(US_ON));
 324:	95 98       	cbi	0x12, 5	; 18
		time0 = 0;
 326:	10 92 ae 00 	sts	0x00AE, r1
 32a:	10 92 ad 00 	sts	0x00AD, r1
}
 32e:	08 95       	ret

00000330 <main>:

int main(void)
{

	init();
 330:	0e 94 8b 01 	call	0x316	; 0x316 <init>
	while (1)
	{
	//	cli();
	//	ibi(OUT_PORT, OUT1);
	//	sei();
		if (time0 > TIME_LS) {
 334:	80 91 ad 00 	lds	r24, 0x00AD
 338:	90 91 ae 00 	lds	r25, 0x00AE
 33c:	22 e0       	ldi	r18, 0x02	; 2
 33e:	81 38       	cpi	r24, 0x81	; 129
 340:	92 07       	cpc	r25, r18
 342:	18 f0       	brcs	.+6      	; 0x34a <main+0x1a>
			setumode(0);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	1c c0       	rjmp	.+56     	; 0x382 <main+0x52>
		} else if (time0 > TIME_RL) {
 34a:	80 91 ad 00 	lds	r24, 0x00AD
 34e:	90 91 ae 00 	lds	r25, 0x00AE
 352:	89 32       	cpi	r24, 0x29	; 41
 354:	91 05       	cpc	r25, r1
 356:	18 f0       	brcs	.+6      	; 0x35e <main+0x2e>
			setumode(3);
 358:	83 e0       	ldi	r24, 0x03	; 3
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	12 c0       	rjmp	.+36     	; 0x382 <main+0x52>
		} else if (time0 > TIME_EM) {
 35e:	80 91 ad 00 	lds	r24, 0x00AD
 362:	90 91 ae 00 	lds	r25, 0x00AE
 366:	85 31       	cpi	r24, 0x15	; 21
 368:	91 05       	cpc	r25, r1
 36a:	18 f0       	brcs	.+6      	; 0x372 <main+0x42>
			setumode(2);
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	08 c0       	rjmp	.+16     	; 0x382 <main+0x52>
		} else if (time0 > TIME_HL) {
 372:	80 91 ad 00 	lds	r24, 0x00AD
 376:	90 91 ae 00 	lds	r25, 0x00AE
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	d9 f2       	breq	.-74     	; 0x334 <main+0x4>
			setumode(1);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 4b 01 	call	0x296	; 0x296 <setumode>
 386:	d6 cf       	rjmp	.-84     	; 0x334 <main+0x4>

00000388 <__vector_3>:

}
*/

ISR (TIMER2_COMP_vect)
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
	switch (umode) {
 39a:	80 91 60 00 	lds	r24, 0x0060
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <__vector_3+0x20>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	91 f5       	brne	.+100    	; 0x40a <__vector_3+0x82>
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <__vector_3+0x2a>
		case 1: {
			US_OPORT ^= bv(US_OP) | bv(US_ON);
 3a8:	82 b3       	in	r24, 0x12	; 18
 3aa:	90 e6       	ldi	r25, 0x60	; 96
 3ac:	89 27       	eor	r24, r25
 3ae:	82 bb       	out	0x12, r24	; 18
			break;
 3b0:	2c c0       	rjmp	.+88     	; 0x40a <__vector_3+0x82>
		}
		case 3: {
			char uincur = (US_IPIN & (bv(US_I))) != 0; //get true or false on input pin
 3b2:	29 b3       	in	r18, 0x19	; 25
 3b4:	21 70       	andi	r18, 0x01	; 1
			if (uincur != uinlast) { //if was change during last half period
 3b6:	30 91 62 00 	lds	r19, 0x0062
 3ba:	80 91 63 00 	lds	r24, 0x0063
 3be:	90 91 64 00 	lds	r25, 0x0064
 3c2:	23 17       	cp	r18, r19
 3c4:	41 f0       	breq	.+16     	; 0x3d6 <__vector_3+0x4e>
				uinlast = uincur;
 3c6:	20 93 62 00 	sts	0x0062, r18
				impcount++; //then increase impulse count
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	90 93 64 00 	sts	0x0064, r25
 3d0:	80 93 63 00 	sts	0x0063, r24
 3d4:	1a c0       	rjmp	.+52     	; 0x40a <__vector_3+0x82>
			} else {
				if (impcount<IMPULSES) { //otherwise if impulse count below minimum
 3d6:	8a 30       	cpi	r24, 0x0A	; 10
 3d8:	91 05       	cpc	r25, r1
 3da:	68 f4       	brcc	.+26     	; 0x3f6 <__vector_3+0x6e>
					impcount = 0; //then wrong work, it was may be ghost :)
 3dc:	10 92 64 00 	sts	0x0064, r1
 3e0:	10 92 63 00 	sts	0x0063, r1
					timest = time0;
 3e4:	80 91 ad 00 	lds	r24, 0x00AD
 3e8:	90 91 ae 00 	lds	r25, 0x00AE
 3ec:	90 93 66 00 	sts	0x0066, r25
 3f0:	80 93 65 00 	sts	0x0065, r24
 3f4:	0a c0       	rjmp	.+20     	; 0x40a <__vector_3+0x82>
				} else { //otherwise we got result in pulses
					umode = 0; //finish listening here
 3f6:	10 92 60 00 	sts	0x0060, r1
					timeen = time0;
 3fa:	80 91 ad 00 	lds	r24, 0x00AD
 3fe:	90 91 ae 00 	lds	r25, 0x00AE
 402:	90 93 68 00 	sts	0x0068, r25
 406:	80 93 67 00 	sts	0x0067, r24
			}
			break;
		}
	}

	time0++;
 40a:	80 91 ad 00 	lds	r24, 0x00AD
 40e:	90 91 ae 00 	lds	r25, 0x00AE
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 ae 00 	sts	0x00AE, r25
 418:	80 93 ad 00 	sts	0x00AD, r24
}
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
