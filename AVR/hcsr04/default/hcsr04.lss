
hcsr04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000166  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000055  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000011c  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d4  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c1  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000be  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000030  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a2 30       	cpi	r26, 0x02	; 2
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	44 d0       	rcall	.+136    	; 0xda <main>
  52:	4d c0       	rjmp	.+154    	; 0xee <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <inittimers>:

volatile unsigned int time;

void inittimers(void)
{
	time = 0;
  56:	10 92 01 01 	sts	0x0101, r1
  5a:	10 92 00 01 	sts	0x0100, r1

	TIMSK0 |= (1<<OCIE0A);	//Interrupt on compare
  5e:	ee e6       	ldi	r30, 0x6E	; 110
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	80 81       	ld	r24, Z
  64:	82 60       	ori	r24, 0x02	; 2
  66:	80 83       	st	Z, r24
	TCCR0A |= (1<<WGM01);	//CTC (clear on compare) mode
  68:	84 b5       	in	r24, 0x24	; 36
  6a:	82 60       	ori	r24, 0x02	; 2
  6c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x04;			//Prescaller clk/256
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	85 bd       	out	0x25, r24	; 37
 
    OCR0A = TIMER0A_VALUE;
  72:	8c e7       	ldi	r24, 0x7C	; 124
  74:	87 bd       	out	0x27, r24	; 39
}
  76:	08 95       	ret

00000078 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
	cli();
  86:	f8 94       	cli
	time++;
  88:	80 91 00 01 	lds	r24, 0x0100
  8c:	90 91 01 01 	lds	r25, 0x0101
  90:	01 96       	adiw	r24, 0x01	; 1
  92:	90 93 01 01 	sts	0x0101, r25
  96:	80 93 00 01 	sts	0x0100, r24
	sei();
  9a:	78 94       	sei
}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <wait>:

void wait(unsigned int interval)
{
	unsigned int starttime=time;
  aa:	20 91 00 01 	lds	r18, 0x0100
  ae:	30 91 01 01 	lds	r19, 0x0101

	while (starttime+interval > time) {
  b2:	28 0f       	add	r18, r24
  b4:	39 1f       	adc	r19, r25
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	90 91 01 01 	lds	r25, 0x0101
  be:	82 17       	cp	r24, r18
  c0:	93 07       	cpc	r25, r19
  c2:	c8 f3       	brcs	.-14     	; 0xb6 <wait+0xc>
	}
}
  c4:	08 95       	ret

000000c6 <init>:


void init()
{
	DDRC |= (1<<LED);
  c6:	3d 9a       	sbi	0x07, 5	; 7
	DDRB |= (1<<S_VCC);
  c8:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<S_GND) || (1<<S_TRIG);
  ca:	50 9a       	sbi	0x0a, 0	; 10
	DDRD &= ~(1<<(S_ECHO));
  cc:	56 98       	cbi	0x0a, 6	; 10

	PORTD &= ~((1<<S_GND) || (1<<S_TRIG));
  ce:	58 98       	cbi	0x0b, 0	; 11
	PORTB |= (1<<S_VCC);
  d0:	28 9a       	sbi	0x05, 0	; 5

	PORTC |= (1<<LED);
  d2:	45 9a       	sbi	0x08, 5	; 8

	inittimers();
  d4:	c0 df       	rcall	.-128    	; 0x56 <inittimers>
	sei();
  d6:	78 94       	sei
}
  d8:	08 95       	ret

000000da <main>:


int main(void)
{
  da:	1f 93       	push	r17
	init();
  dc:	f4 df       	rcall	.-24     	; 0xc6 <init>
	{
//		for (int i=0; i<1; i++) {
			wait(500);
//		}
		//cli();
		PORTC ^= (1<<LED);
  de:	10 e2       	ldi	r17, 0x20	; 32
	init();

	while (1)
	{
//		for (int i=0; i<1; i++) {
			wait(500);
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	e2 df       	rcall	.-60     	; 0xaa <wait>
//		}
		//cli();
		PORTC ^= (1<<LED);
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	81 27       	eor	r24, r17
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	f9 cf       	rjmp	.-14     	; 0xe0 <main+0x6>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
