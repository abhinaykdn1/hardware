
serialdebug.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000034c  000003e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800070  00800070  000003f0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000db  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000256  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000106  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002fe  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000134  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  8a:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initUSART>:
uint8_t usart_tx_wp;
uint8_t usart_tx_rp;
char usart_tx_buf[USART_TX_BUF];

void initUSART(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
        UBRRL = LO(bauddivider);
  9a:	89 e2       	ldi	r24, 0x29	; 41
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	2c e0       	ldi	r18, 0x0C	; 12
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
        UBRRH = HI(bauddivider);
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	fc 01       	movw	r30, r24
  aa:	10 82       	st	Z, r1
        UCSRA = 0;
  ac:	8b e2       	ldi	r24, 0x2B	; 43
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	10 82       	st	Z, r1
        UCSRB = 1<<RXEN|1<<TXEN|1<<RXCIE|1<<TXCIE;
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	28 ed       	ldi	r18, 0xD8	; 216
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
        UCSRC = 1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	26 e8       	ldi	r18, 0x86	; 134
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18

		usart_rx_wp = 0;
  c8:	10 92 b3 00 	sts	0x00B3, r1
		usart_rx_rp = 0;
  cc:	10 92 90 00 	sts	0x0090, r1

		usart_tx_wp = 0;
  d0:	10 92 91 00 	sts	0x0091, r1
		usart_tx_rp = 0;
  d4:	10 92 b2 00 	sts	0x00B2, r1
}
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <putchr>:

void putchr(char ch)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01
	cli();
  ea:	f8 94       	cli
	if (usart_tx_wp<USART_TX_BUF) {
  ec:	80 91 91 00 	lds	r24, 0x0091
  f0:	80 32       	cpi	r24, 0x20	; 32
  f2:	70 f4       	brcc	.+28     	; 0x110 <putchr+0x32>
		usart_tx_buf[usart_tx_wp] = ch;
  f4:	80 91 91 00 	lds	r24, 0x0091
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	80 59       	subi	r24, 0x90	; 144
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
		usart_tx_wp++;
 106:	80 91 91 00 	lds	r24, 0x0091
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 91 00 	sts	0x0091, r24
	} //else buffer overflow error
	sei();
 110:	78 94       	sei

	if (UCSRA & (1<<UDRE)) {
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	80 72       	andi	r24, 0x20	; 32
 120:	90 70       	andi	r25, 0x00	; 0
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	d9 f0       	breq	.+54     	; 0x15c <putchr+0x7e>
		UDR = usart_tx_buf[usart_tx_rp];
 126:	8c e2       	ldi	r24, 0x2C	; 44
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	20 91 b2 00 	lds	r18, 0x00B2
 12e:	22 2f       	mov	r18, r18
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	20 59       	subi	r18, 0x90	; 144
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
		usart_tx_rp++;
 13e:	80 91 b2 00 	lds	r24, 0x00B2
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 b2 00 	sts	0x00B2, r24
		if (usart_tx_rp>=usart_tx_wp) {
 148:	90 91 b2 00 	lds	r25, 0x00B2
 14c:	80 91 91 00 	lds	r24, 0x0091
 150:	98 17       	cp	r25, r24
 152:	20 f0       	brcs	.+8      	; 0x15c <putchr+0x7e>
			usart_tx_rp = 0;
 154:	10 92 b2 00 	sts	0x00B2, r1
			usart_tx_wp = 0;
 158:	10 92 91 00 	sts	0x0091, r1
		}
	}
}
 15c:	0f 90       	pop	r0
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <chrready>:

char chrready(void)
{
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	return (usart_rx_wp>usart_rx_rp);
 16c:	20 91 b3 00 	lds	r18, 0x00B3
 170:	90 91 90 00 	lds	r25, 0x0090
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	92 17       	cp	r25, r18
 178:	08 f0       	brcs	.+2      	; 0x17c <chrready+0x18>
 17a:	80 e0       	ldi	r24, 0x00	; 0
}
 17c:	cf 91       	pop	r28
 17e:	df 91       	pop	r29
 180:	08 95       	ret

00000182 <getchr>:

char getchr(void)
{
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	0f 92       	push	r0
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	sei();
 18c:	78 94       	sei
	while (usart_rx_wp<=usart_rx_rp);
 18e:	00 00       	nop
 190:	90 91 b3 00 	lds	r25, 0x00B3
 194:	80 91 90 00 	lds	r24, 0x0090
 198:	89 17       	cp	r24, r25
 19a:	d0 f7       	brcc	.-12     	; 0x190 <getchr+0xe>
//	{
//		char a = 1;
//		a++;
//	} //wait for char
	cli();
 19c:	f8 94       	cli
	char c = usart_rx_buf[usart_rx_rp];
 19e:	80 91 90 00 	lds	r24, 0x0090
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	8e 56       	subi	r24, 0x6E	; 110
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	fc 01       	movw	r30, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	89 83       	std	Y+1, r24	; 0x01
	usart_rx_rp++;
 1b0:	80 91 90 00 	lds	r24, 0x0090
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 90 00 	sts	0x0090, r24
	if (usart_rx_rp >= usart_rx_wp) {
 1ba:	90 91 90 00 	lds	r25, 0x0090
 1be:	80 91 b3 00 	lds	r24, 0x00B3
 1c2:	98 17       	cp	r25, r24
 1c4:	20 f0       	brcs	.+8      	; 0x1ce <getchr+0x4c>
		usart_rx_rp = 0;
 1c6:	10 92 90 00 	sts	0x0090, r1
		usart_rx_wp = 0;
 1ca:	10 92 b3 00 	sts	0x00B3, r1
	}
	sei();
 1ce:	78 94       	sei
	return c;
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
}
 1d2:	0f 90       	pop	r0
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	08 95       	ret

000001da <printstr>:

void printstr(char *string)
{
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <printstr+0x6>
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	9a 83       	std	Y+2, r25	; 0x02
 1e6:	89 83       	std	Y+1, r24	; 0x01
	while (*string!='\0')
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <printstr+0x26>
	{
		putchr(*string);
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	fc 01       	movw	r30, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 6f 00 	call	0xde	; 0xde <putchr>
		string++;
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	9a 83       	std	Y+2, r25	; 0x02
 1fe:	89 83       	std	Y+1, r24	; 0x01
	return c;
}

void printstr(char *string)
{
	while (*string!='\0')
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	fc 01       	movw	r30, r24
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	79 f7       	brne	.-34     	; 0x1ea <printstr+0x10>
	{
		putchr(*string);
		string++;
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	cf 91       	pop	r28
 212:	df 91       	pop	r29
 214:	08 95       	ret

00000216 <main>:

int main(void)
{
 216:	df 93       	push	r29
 218:	cf 93       	push	r28
 21a:	0f 92       	push	r0
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
	//c = 0;
	initUSART();
 220:	0e 94 49 00 	call	0x92	; 0x92 <initUSART>

	printstr("Hello world!\n\r");
 224:	80 e6       	ldi	r24, 0x60	; 96
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 ed 00 	call	0x1da	; 0x1da <printstr>
//	print();

//	UDR = c;
	DDRD = bv(5);
 22c:	81 e3       	ldi	r24, 0x31	; 49
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	20 e2       	ldi	r18, 0x20	; 32
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	01 c0       	rjmp	.+2      	; 0x23a <main+0x24>
		sei();
		if (chrready()) {
			char c = getchr();
			putchr(c);
		}
	}
 238:	00 00       	nop
//	UDR = c;
	DDRD = bv(5);

	while (1)
	{
		cli();
 23a:	f8 94       	cli
		ibi(PORTD, 5);
 23c:	82 e3       	ldi	r24, 0x32	; 50
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	22 e3       	ldi	r18, 0x32	; 50
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	30 81       	ld	r19, Z
 248:	20 e2       	ldi	r18, 0x20	; 32
 24a:	23 27       	eor	r18, r19
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
		sei();
 250:	78 94       	sei
		if (chrready()) {
 252:	0e 94 b2 00 	call	0x164	; 0x164 <chrready>
 256:	88 23       	and	r24, r24
 258:	79 f3       	breq	.-34     	; 0x238 <main+0x22>
			char c = getchr();
 25a:	0e 94 c1 00 	call	0x182	; 0x182 <getchr>
 25e:	89 83       	std	Y+1, r24	; 0x01
			putchr(c);
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	0e 94 6f 00 	call	0xde	; 0xde <putchr>
		}
	}
 266:	e9 cf       	rjmp	.-46     	; 0x23a <main+0x24>

00000268 <__vector_11>:
}


ISR(USART_RXC_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	0f 92       	push	r0
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	char c = UDR;
 286:	8c e2       	ldi	r24, 0x2C	; 44
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	fc 01       	movw	r30, r24
 28c:	80 81       	ld	r24, Z
 28e:	89 83       	std	Y+1, r24	; 0x01
	if (usart_rx_wp<USART_RX_BUF) {
 290:	80 91 b3 00 	lds	r24, 0x00B3
 294:	80 32       	cpi	r24, 0x20	; 32
 296:	70 f4       	brcc	.+28     	; 0x2b4 <__vector_11+0x4c>
		usart_rx_buf[usart_rx_wp] = c;
 298:	80 91 b3 00 	lds	r24, 0x00B3
 29c:	88 2f       	mov	r24, r24
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	8e 56       	subi	r24, 0x6E	; 110
 2a2:	9f 4f       	sbci	r25, 0xFF	; 255
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
		usart_rx_wp++;
 2aa:	80 91 b3 00 	lds	r24, 0x00B3
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 b3 00 	sts	0x00B3, r24
	} //else we lose byte from UART
}
 2b4:	0f 90       	pop	r0
 2b6:	cf 91       	pop	r28
 2b8:	df 91       	pop	r29
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_13>:

ISR(USART_TXC_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	df 93       	push	r29
 2e6:	cf 93       	push	r28
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
	if (usart_tx_rp<usart_tx_wp) {
 2ec:	90 91 b2 00 	lds	r25, 0x00B2
 2f0:	80 91 91 00 	lds	r24, 0x0091
 2f4:	98 17       	cp	r25, r24
 2f6:	d8 f4       	brcc	.+54     	; 0x32e <__vector_13+0x60>
		UDR = usart_tx_buf[usart_tx_rp];
 2f8:	8c e2       	ldi	r24, 0x2C	; 44
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	20 91 b2 00 	lds	r18, 0x00B2
 300:	22 2f       	mov	r18, r18
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	20 59       	subi	r18, 0x90	; 144
 306:	3f 4f       	sbci	r19, 0xFF	; 255
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
		usart_tx_rp++;
 310:	80 91 b2 00 	lds	r24, 0x00B2
 314:	8f 5f       	subi	r24, 0xFF	; 255
 316:	80 93 b2 00 	sts	0x00B2, r24
		if (usart_tx_rp>=usart_tx_wp) {
 31a:	90 91 b2 00 	lds	r25, 0x00B2
 31e:	80 91 91 00 	lds	r24, 0x0091
 322:	98 17       	cp	r25, r24
 324:	20 f0       	brcs	.+8      	; 0x32e <__vector_13+0x60>
			usart_tx_rp = 0;
 326:	10 92 b2 00 	sts	0x00B2, r1
			usart_tx_wp = 0;
 32a:	10 92 91 00 	sts	0x0091, r1
		}
	}	
}
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	9f 91       	pop	r25
 338:	8f 91       	pop	r24
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
